# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: pypi
      # OPTIONAL: uncomment and update to include your PyPI project URL in the deployment status:
      # url: https://pypi.org/p/YOURPROJECT
      #
      # ALTERNATIVE: if your GitHub Release name is the PyPI project version string
      # ALTERNATIVE: exactly, uncomment the following line instead:
      # url: https://pypi.org/project/YOURPROJECT/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  github-release-dist:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - release-build

    steps:
      - uses: actions/checkout@v4
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/
      - name: find tar.gz file
        run: |
          find dist -name "*.tar.gz" | while read file; do
            filename=$(basename "$file")
            echo "file=$file" >> $GITHUB_OUTPUT
            echo "filename=$filename" >> $GITHUB_OUTPUT
          done
        id: set-tar-gz-file

      - name: Upload tar.gz files to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.set-tar-gz-file.outputs.file }}
          asset_name: ${{ steps.set-tar-gz-file.outputs.filename }}
          asset_content_type: application/octet-stream

      - name: find wheel file
        run: |
          find dist -name "*.whl" | while read file; do
            filename=$(basename "$file")
            echo "file=$file" >> $GITHUB_OUTPUT
            echo "filename=$filename" >> $GITHUB_OUTPUT
          done
        id: set-wheel-file

      - name: Upload tar.gz files to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.set-wheel-file.outputs.file }}
          asset_name: ${{ steps.set-wheel-file.outputs.filename }}
          asset_content_type: application/octet-stream

  doc-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Build Doc
        run: |
          python -m pip install -r requirements.txt
          python -m pip install -r requirements_doc.txt
          python ./tools/buildDoc.py

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-docs
          path: temp/
  github-release-doc:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - doc-build

    steps:
      - uses: actions/checkout@v4
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-docs
          path: temp/
      - name: find zip file
        run: |
          find temp -name "*.zip" | while read file; do
            filename=$(basename "$file")
            echo "file=$file" >> $GITHUB_OUTPUT
            echo "filename=$filename" >> $GITHUB_OUTPUT
          done
        id: set-zip-file

      - name: Upload zip files to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.set-zip-file.outputs.file }}
          asset_name: ${{ steps.set-zip-file.outputs.filename }}
          asset_content_type: application/octet-stream
